# -*- coding: utf-8 -*-
"""Project 7. Heart Disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sVa8IAR04Lnnb4CgvLT9KkxXltTTNEvQ

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and processing"""

# loading the csv data to a pandas dataframe
heart_data = pd.read_csv('/content/heart_disease_data.csv')

# print first five rows of the dataset
heart_data.head()

# print last five rows of dataset
heart_data.tail()

# number of rows and columns in the dataset
heart_data.shape

# getting some info about the data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
heart_data.describe()

# checking the distribution of target variable
heart_data['target'].value_counts()

"""1--> Defective Heart
0--> Healthy Heart

Splitting the Features and Target
"""

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""Splitting the data into Training data and Test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# training the LogoisticRegression model with training data
model.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
trainin_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy on training data:',trainin_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy on test data:',test_data_accuracy)

"""Building a predictive system"""

input_data = (57,1,2,128,229,0,0,150,0,0.4,1,1,3)

# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
  print('The Person does not have a Heart Disease')
else:
  print('the Person has a Heart Disease')

